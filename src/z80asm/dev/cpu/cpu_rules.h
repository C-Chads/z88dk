| label? _TK_ACI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xCE);
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8F);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F88);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x88);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F89);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x89);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8C);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8D);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xCE);
}

| label? _TK_ADC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8F);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8F);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F88);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x88);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F89);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x89);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8A);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8C);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8D);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F88);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x88);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F89);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x89);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8C);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__adc_hl_bc");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__adc_hl_de");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__adc_hl_hl");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__adc_hl_sp");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_HL1 _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8D);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F8E);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADC expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xCE);
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F87);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x87);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F80);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x80);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F81);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x81);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F82);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x82);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F83);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x83);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F84);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F85);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xC6);
}

| label? _TK_ADD _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F87);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x87);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F87);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x87);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F80);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x80);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F81);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x81);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F82);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x82);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F83);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x83);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F84);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F85);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F80);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x80);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_BC _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__add_bc_a");
break;
case CPU_Z80N: 
DO_stmt(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xE5);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x09);
DO_stmt(0x44);
DO_stmt(0x4D);
DO_stmt(0xE1);
OBJ_DELETE(expr);
}
break;
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xE5);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x09);
DO_stmt(0x7F44);
DO_stmt(0x7F4D);
DO_stmt(0xE1);
OBJ_DELETE(expr);
}
break;
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED36, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F81);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x81);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F82);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x82);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DE _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__add_de_a");
break;
case CPU_Z80N: 
DO_stmt(0xED32);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xE5);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x19);
DO_stmt(0x54);
DO_stmt(0x5D);
DO_stmt(0xE1);
OBJ_DELETE(expr);
}
break;
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xE5);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x19);
DO_stmt(0x7F54);
DO_stmt(0x7F5D);
DO_stmt(0xE1);
OBJ_DELETE(expr);
}
break;
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED35, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F83);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x83);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F84);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__add_hl_a");
break;
case CPU_Z80N: 
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
DO_stmt(0x09);
}

| label? _TK_ADD _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
DO_stmt(0x19);
}

| label? _TK_ADD _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
DO_stmt(0x29);
}

| label? _TK_ADD _TK_HL _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x65);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
DO_stmt(0x39);
}

| label? _TK_ADD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD5);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
DO_stmt(0x19);
DO_stmt(0xD1);
OBJ_DELETE(expr);
}
break;
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED34, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL1 _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x65);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_HL1 _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IX _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IY _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_JKHL1 _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F85);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F86);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_STMT_LABEL();
add_call_emul_func("__z80asm__add_sp_s");
DO_stmt_defb();
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x27);
break;
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADD expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xC6);
}

| label? _TK_ADI _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x28);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADI _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x38);
break;
default: error_illegal_ident(); }
}

| label? _TK_ADI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xC6);
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8F);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F88);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x88);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F89);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x89);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8A);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8C);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8D);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8F);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F88);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x88);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F89);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x89);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8A);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8C);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F8D);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADC expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F87);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x87);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F80);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x80);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F81);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x81);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F82);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x82);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F83);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x83);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F84);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F85);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F87);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x87);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F80);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x80);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F81);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x81);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F82);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x82);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F83);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x83);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F84);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_HL _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x65);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IX _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_IY _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F85);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_d(0x27);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_ADD expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA7);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA0);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA2);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA3);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA4);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA5);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA7);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA0);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA2);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA3);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA4);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA5);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_AND expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB47+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB40+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB41+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB42+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB43+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB44+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB45+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_BOOL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CCF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x010000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x110000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x210000);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CLR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED48);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x7648);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED58);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CMP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED48);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x7648);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED58);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FBD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CPL _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_CPL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x05);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x15);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x25);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DEC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DJNZ _TK_B _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x7610);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DJNZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x7610);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DWJNZ _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x76ED10);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_DWJNZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x76ED10);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_BC _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_BC1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED74);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_DE _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_DE1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_JK _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_EX _TK_JK1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x04);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x14);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x24);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_INC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xDB);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOE _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDB);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
DO_stmt(0xD3);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_IOI _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD3);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x78);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F78);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x79);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F79);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_EIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED57);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_HTR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED50);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x8D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xAD00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xBD00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_XPC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED77);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt(0x76);
DO_stmt_n(0x3E); }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x47);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F47);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x40);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F40);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x41);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F41);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x42);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F42);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x43);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F43);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x44);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F44);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x45);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F45);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_B _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED49);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED41);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7691);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D02);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D12);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D10);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D22);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D20);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D32);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D30);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDEE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xDDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDDD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDED);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDFD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt(0x76);
DO_stmt_d(0xA3); }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x48);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F48);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x49);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F49);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x57);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F57);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x50);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F50);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x51);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F51);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x52);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F52);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x53);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F53);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x54);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F54);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x55);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F55);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_D _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED59);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED51);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D42);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D40);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D52);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D50);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D62);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D60);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D72);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D70);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x58);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F58);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x59);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F59);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_E _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x67);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F67);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x60);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F60);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x61);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F61);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x62);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F62);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x63);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F63);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x64);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F64);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x65);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F65);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_H _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7681);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED69);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76A1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED61);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PW _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x8500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PX _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PY _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xA500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED36);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xB500);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xC400);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_LXPC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xA9, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDEE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xFDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDDD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDED);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDFD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt(0x76);
DO_stmt_d(0xA4); }
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x68);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F68);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x69);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F69);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_L _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D08);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D18);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D28);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D38);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D07);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D04);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D05);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D17);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D14);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D15);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D27);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D24);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D25);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D37);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D36);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D34);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D35);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D48);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D58);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D68);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D78);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D47);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D46);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D44);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D45);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D57);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D56);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D54);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D55);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D67);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D66);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D64);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D65);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D77);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D76);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D74);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D75);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D8800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D88);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D9800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D98);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D87);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D86);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D84);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D85);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D97);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D94);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D95);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DDA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DEA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DFA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF800);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0x9A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xDD0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED1A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0x92, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xFD0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_PW _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED08, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_PX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED18, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_PY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED28, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDF _TK_PZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED38, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PW _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED0D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED1D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED2D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_LDL _TK_PZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED3D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_NEG _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED44);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_NEG _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76DD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_NEG _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x764D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_NEG _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76FD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_NEG _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED44);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB7);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB0);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB2);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB3);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB4);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB5);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB7);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB0);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB2);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB3);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB4);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB5);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_OR expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_POP _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RES const_expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x62);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x42);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x68:expr_value==2?0x69:expr_value==4?0x6B:0x6F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RL const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x68:expr_value==2?0x69:expr_value==4?0x6B:0x6F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLA _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x17);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x60);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x50);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x48:expr_value==2?0x49:expr_value==4?0x4B:0x4F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLC const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x48:expr_value==2?0x49:expr_value==4?0x4B:0x4F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RLCA _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x07);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x63);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x78:expr_value==2?0x79:expr_value==4?0x7B:0x7F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RR const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x78:expr_value==2?0x79:expr_value==4?0x7B:0x7F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRA _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x61);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x51);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x58:expr_value==2?0x59:expr_value==4?0x5B:0x5F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRC const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x58:expr_value==2?0x59:expr_value==4?0x5B:0x5F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_RRCA _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9F);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F98);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F99);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x99);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9A);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9C);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9D);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9F);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F98);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F99);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x99);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9A);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9C);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9D);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBC expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SBOX _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SCF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x37);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SET const_expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x88:expr_value==2?0x89:expr_value==4?0x8B:0x8F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLA const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x88:expr_value==2?0x89:expr_value==4?0x8B:0x8F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLL const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0xA8:expr_value==2?0xA9:expr_value==4?0xAB:0xAF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SLL const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0xA8:expr_value==2?0xA9:expr_value==4?0xAB:0xAF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x98:expr_value==2?0x99:expr_value==4?0x9B:0x9F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRA const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x98:expr_value==2?0x99:expr_value==4?0x9B:0x9F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0xB8:expr_value==2?0xB9:expr_value==4?0xBB:0xBF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SRL const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0xB8:expr_value==2?0xB9:expr_value==4?0xBB:0xBF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F97);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x97);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F90);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x90);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F91);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x91);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F92);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x92);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F93);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x93);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F94);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x94);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F95);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F97);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x97);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F90);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x90);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F91);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x91);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F92);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x92);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F93);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x93);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F94);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x94);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x55);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_HL _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x45);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F95);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_SUB expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_TEST _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_TEST _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76DD5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_TEST _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x764C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_TEST _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76DD4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_TEST _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76FD4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_TEST _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76FD5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x54);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_ALTD _TK_XOR expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA7);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA0);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA2);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA4);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA5);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ANA _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA7);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA0);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA2);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA4);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA5);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xE6);
}

| label? _TK_AND _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA7);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA7);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA0);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA2);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA3);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA4);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA5);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA0);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA2);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA4);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xA0);
DO_stmt(0x67);
DO_stmt(0x7D);
DO_stmt(0xA1);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF5);
DO_stmt(0x7F7C);
DO_stmt(0x7FA0);
DO_stmt(0x7F67);
DO_stmt(0x7F7D);
DO_stmt(0x7FA1);
DO_stmt(0x7F6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xA2);
DO_stmt(0x67);
DO_stmt(0x7D);
DO_stmt(0xA3);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA6);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xA0);
DO_stmt(0xDD67);
DO_stmt(0xDD7D);
DO_stmt(0xA1);
DO_stmt(0xDD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDDC);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xA2);
DO_stmt(0xDD67);
DO_stmt(0xDD7D);
DO_stmt(0xA3);
DO_stmt(0xDD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xA0);
DO_stmt(0xFD67);
DO_stmt(0xFD7D);
DO_stmt(0xA1);
DO_stmt(0xFD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xA2);
DO_stmt(0xFD67);
DO_stmt(0xFD7D);
DO_stmt(0xA3);
DO_stmt(0xFD6F);
DO_stmt(0xF1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_JKHL1 _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA5);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_AND expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xE6);
}

| label? _TK_ANI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xE6);
}

| label? _TK_ARHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sra_hl");
break;
case CPU_8085: 
DO_stmt(0x10);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2C);
DO_stmt(0xCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB47+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB40+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB41+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB42+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB43+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB44+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BIT const_expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB45+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_BOOL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xCC);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xB5);
add_opcode_jr_end(0x28, end_label, 1);
DO_stmt(0x210100);
DO_stmt(0xF1);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xB5);
add_opcode_nn_end(0xCA, end_label, 1);
DO_stmt(0x210100);
DO_stmt(0xF1);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_BOOL _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCC);
break;
default: error_illegal_ident(); }
}

| label? _TK_BOOL _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDCC);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xDDB5);
add_opcode_jr_end(0x28, end_label, 1);
DO_stmt(0xDD210100);
DO_stmt(0xF1);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_BOOL _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDCC);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xFDB5);
add_opcode_jr_end(0x28, end_label, 1);
DO_stmt(0xFD210100);
DO_stmt(0xF1);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_BRLC _TK_DE _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_BSLA _TK_DE _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED28);
break;
default: error_illegal_ident(); }
}

| label? _TK_BSRA _TK_DE _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED29);
break;
default: error_illegal_ident(); }
}

| label? _TK_BSRF _TK_DE _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_BSRL _TK_DE _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_DOT _TK_IL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_DOT _TK_IS expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_DOT _TK_LIL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_DOT _TK_LIS expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_DOT _TK_SIL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_DOT _TK_SIS expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__call_hl");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDEA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__call_ix");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDEA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__call_iy");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDEA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x20, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
add_opcode_nn_end(0xDA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x52);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x5B);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x52);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x5B);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IL_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x40);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x49);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x40);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x49);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_IS_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 3);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 4);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 3);
add_opcode_nn_end(0xD2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x5B);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x5B);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIL_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x49);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x49);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LIS_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_LZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xF2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xFA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x52);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x52);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIL_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x40);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 5);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt(0x40);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_SIS_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CALL_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x20, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CBM expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CC expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CCF _TK_NEWLINE @{
DO_stmt(0x3F);
}

| label? _TK_CCF1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_CEQ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x20, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CGEU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CGTU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
add_opcode_nn_end(0xDA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CLEU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 3);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 4);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 3);
add_opcode_nn_end(0xD2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CLO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_A _TK_NEWLINE @{
DO_stmt(0x3E00);
}

| label? _TK_CLR _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_B _TK_NEWLINE @{
DO_stmt(0x0600);
}

| label? _TK_CLR _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_BC _TK_NEWLINE @{
DO_stmt(0x010000);
}

| label? _TK_CLR _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x010000);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_C _TK_NEWLINE @{
DO_stmt(0x0E00);
}

| label? _TK_CLR _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_D _TK_NEWLINE @{
DO_stmt(0x1600);
}

| label? _TK_CLR _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_DE _TK_NEWLINE @{
DO_stmt(0x110000);
}

| label? _TK_CLR _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x110000);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_E _TK_NEWLINE @{
DO_stmt(0x1E00);
}

| label? _TK_CLR _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_H _TK_NEWLINE @{
DO_stmt(0x2600);
}

| label? _TK_CLR _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x210000);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x210000);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x3600);
}

| label? _TK_CLR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD360000);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD360000);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD210000);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD2600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD210000);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD2600);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLR _TK_L _TK_NEWLINE @{
DO_stmt(0x2E00);
}

| label? _TK_CLR _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CLTU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CLZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CM expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xF2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CMA _TK_NEWLINE @{
DO_stmt(0x2F);
}

| label? _TK_CMC _TK_NEWLINE @{
DO_stmt(0x3F);
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFE);
}

| label? _TK_CMP _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED48);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x48);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED58);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CMP expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFE);
}

| label? _TK_CNC expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CNE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CNV expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CNZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVC _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVC _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVC _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVC _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVD _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVD _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVD _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_CONVD _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_COPY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED80);
break;
default: error_illegal_ident(); }
}

| label? _TK_COPYR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED88);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFE);
}

| label? _TK_CP _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED48);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x48);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED58);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FBD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_CP expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFE);
}

| label? _TK_CPD _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPD _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPD _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPD _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__cpd");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPDR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPDR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPDR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPDR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__cpdr");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CPI _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPI _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPI _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPI _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__cpi");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFE);
}

| label? _TK_CPIR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPIR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPIR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPIR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__cpir");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPL _TK_A _TK_NEWLINE @{
DO_stmt(0x2F);
}

| label? _TK_CPL _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_CPL _TK_NEWLINE @{
DO_stmt(0x2F);
}

| label? _TK_CPO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CV expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_CZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x20, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_C expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_EQ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x20, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_GEU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_GTU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
add_opcode_nn_end(0xDA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_LEU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 3);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 4);
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nnn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 3);
add_opcode_nn_end(0xD2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_LO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_LTU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x30, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_LZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_M expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xF2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_NC expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_NE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_NV expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_NZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_P expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xF4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xFA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_PE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_PO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE4, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xEA, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_V expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xE2, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_C_Z expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCC, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x20, end_label, 0);
DO_stmt_nn(0xCD);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_DAA _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__daa");
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x27);
break;
default: error_illegal_ident(); }
}

| label? _TK_DAD _TK_B _TK_NEWLINE @{
DO_stmt(0x09);
}

| label? _TK_DAD _TK_BC _TK_NEWLINE @{
DO_stmt(0x09);
}

| label? _TK_DAD _TK_D _TK_NEWLINE @{
DO_stmt(0x19);
}

| label? _TK_DAD _TK_DE _TK_NEWLINE @{
DO_stmt(0x19);
}

| label? _TK_DAD _TK_H _TK_NEWLINE @{
DO_stmt(0x29);
}

| label? _TK_DAD _TK_HL _TK_NEWLINE @{
DO_stmt(0x29);
}

| label? _TK_DAD _TK_SP _TK_NEWLINE @{
DO_stmt(0x39);
}

| label? _TK_DCR _TK_A _TK_NEWLINE @{
DO_stmt(0x3D);
}

| label? _TK_DCR _TK_B _TK_NEWLINE @{
DO_stmt(0x05);
}

| label? _TK_DCR _TK_C _TK_NEWLINE @{
DO_stmt(0x0D);
}

| label? _TK_DCR _TK_D _TK_NEWLINE @{
DO_stmt(0x15);
}

| label? _TK_DCR _TK_E _TK_NEWLINE @{
DO_stmt(0x1D);
}

| label? _TK_DCR _TK_H _TK_NEWLINE @{
DO_stmt(0x25);
}

| label? _TK_DCR _TK_L _TK_NEWLINE @{
DO_stmt(0x2D);
}

| label? _TK_DCR _TK_M _TK_NEWLINE @{
DO_stmt(0x35);
}

| label? _TK_DCX _TK_B _TK_NEWLINE @{
DO_stmt(0x0B);
}

| label? _TK_DCX _TK_BC _TK_NEWLINE @{
DO_stmt(0x0B);
}

| label? _TK_DCX _TK_D _TK_NEWLINE @{
DO_stmt(0x1B);
}

| label? _TK_DCX _TK_DE _TK_NEWLINE @{
DO_stmt(0x1B);
}

| label? _TK_DCX _TK_H _TK_NEWLINE @{
DO_stmt(0x2B);
}

| label? _TK_DCX _TK_HL _TK_NEWLINE @{
DO_stmt(0x2B);
}

| label? _TK_DCX _TK_SP _TK_NEWLINE @{
DO_stmt(0x3B);
}

| label? _TK_DEC _TK_A _TK_NEWLINE @{
DO_stmt(0x3D);
}

| label? _TK_DEC _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_B _TK_NEWLINE @{
DO_stmt(0x05);
}

| label? _TK_DEC _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x05);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_BC _TK_NEWLINE @{
DO_stmt(0x0B);
}

| label? _TK_DEC _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_C _TK_NEWLINE @{
DO_stmt(0x0D);
}

| label? _TK_DEC _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_D _TK_NEWLINE @{
DO_stmt(0x15);
}

| label? _TK_DEC _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x15);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DE _TK_NEWLINE @{
DO_stmt(0x1B);
}

| label? _TK_DEC _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_L _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_LIS _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_S _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_DOT _TK_SIL _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_E _TK_NEWLINE @{
DO_stmt(0x1D);
}

| label? _TK_DEC _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_H _TK_NEWLINE @{
DO_stmt(0x25);
}

| label? _TK_DEC _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x25);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_HL _TK_NEWLINE @{
DO_stmt(0x2B);
}

| label? _TK_DEC _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x35);
DO_stmt(0x2B);
}

| label? _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x35);
DO_stmt(0x23);
}

| label? _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x35);
}

| label? _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD25);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD25);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_L _TK_NEWLINE @{
DO_stmt(0x2D);
}

| label? _TK_DEC _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_DEC _TK_SP _TK_NEWLINE @{
DO_stmt(0x3B);
}

| label? _TK_DI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_DJNZ _TK_B _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x0520);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x10);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x5C2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_DJNZ _TK_B1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x7610);
break;
default: error_illegal_ident(); }
}

| label? _TK_DJNZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x0520);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x10);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x5C2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_DSUB _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sub_hl_bc");
break;
case CPU_8085: 
DO_stmt(0x08);
break;
default: error_illegal_ident(); }
}

| label? _TK_DWJNZ _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0xED10);
break;
default: error_illegal_ident(); }
}

| label? _TK_DWJNZ _TK_BC1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x76ED10);
break;
default: error_illegal_ident(); }
}

| label? _TK_DWJNZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0xED10);
break;
default: error_illegal_ident(); }
}

| label? _TK_EI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFB);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_AF _TK_COMMA _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x08);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_AF _TK_COMMA _TK_AF1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x08);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_AF1 _TK_COMMA _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x08);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_BC _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE5);
DO_stmt(0xC5);
DO_stmt(0xE1);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_BC _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_BC1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED74);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_BC1 _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED74);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_BCDE _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DE _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DE _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DE1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DE1 _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_L _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_L _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_L _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_LIS _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_LIS _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_LIS _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_S _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_S _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_S _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_SIL _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_SIL _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_DOT _TK_SIL _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE5);
DO_stmt(0xC5);
DO_stmt(0xE1);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL _TK_COMMA _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED74);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL _TK_COMMA _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL _TK_COMMA _TK_JK1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL1 _TK_COMMA _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED74);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL1 _TK_COMMA _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL1 _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B9);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_HL1 _TK_COMMA _TK_JK1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__ex_sp_hl");
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE3);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_JK _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_JK _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B9);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_JK1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_JK1 _TK_COMMA _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_EX _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_EXP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_EXX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_C _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_GT _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_GTU _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_LT _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_NC _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_NZ _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_V _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_FLAG_Z _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDCC);
break;
default: error_illegal_ident(); }
}

| label? _TK_FSYSCALL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED55);
break;
default: error_illegal_ident(); }
}

| label? _TK_HALT _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x76);
break;
default: error_illegal_ident(); }
}

| label? _TK_HLT _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x76);
break;
default: error_illegal_ident(); }
}

| label? _TK_IBOX _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED12);
break;
default: error_illegal_ident(); }
}

| label? _TK_IDET _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x5B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IM const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xED00+((expr_value==0?0x46:expr_value==1?0x56:0x5E)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED78);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_A _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED78);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
DO_stmt_n(0xDB);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_B _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED40);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_B _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED40);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_C _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED48);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_C _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED48);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_D _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED50);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_D _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED50);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_E _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED58);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_E _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED58);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_F _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_F _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_H _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED60);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_H _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED60);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_L _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED68);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN _TK_L _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED68);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDB);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED38);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_B _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED08);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_D _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED10);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_E _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED18);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_F _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED30);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_H _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED20);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 _TK_L _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED28);
break;
default: error_illegal_ident(); }
}

| label? _TK_IN0 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED30);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_A _TK_NEWLINE @{
DO_stmt(0x3C);
}

| label? _TK_INC _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_B _TK_NEWLINE @{
DO_stmt(0x04);
}

| label? _TK_INC _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x04);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_BC _TK_NEWLINE @{
DO_stmt(0x03);
}

| label? _TK_INC _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_C _TK_NEWLINE @{
DO_stmt(0x0C);
}

| label? _TK_INC _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_D _TK_NEWLINE @{
DO_stmt(0x14);
}

| label? _TK_INC _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x14);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DE _TK_NEWLINE @{
DO_stmt(0x13);
}

| label? _TK_INC _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_L _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x33);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_LIS _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x33);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_S _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x33);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_DOT _TK_SIL _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x33);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_E _TK_NEWLINE @{
DO_stmt(0x1C);
}

| label? _TK_INC _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_H _TK_NEWLINE @{
DO_stmt(0x24);
}

| label? _TK_INC _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x24);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_HL _TK_NEWLINE @{
DO_stmt(0x23);
}

| label? _TK_INC _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x34);
DO_stmt(0x2B);
}

| label? _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x34);
DO_stmt(0x23);
}

| label? _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x34);
}

| label? _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD24);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD23);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD24);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_L _TK_NEWLINE @{
DO_stmt(0x2C);
}

| label? _TK_INC _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INC _TK_SP _TK_NEWLINE @{
DO_stmt(0x33);
}

| label? _TK_IND _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2 _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2 _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2 _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2 _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2R _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2R _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2R _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2R _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_IND2R _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDM _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDM _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDM _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDM _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDMR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDMR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDMR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDMR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDMR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDRX _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDRX _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDRX _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDRX _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INDRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2 _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED84);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2 _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED84);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2 _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED84);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2 _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED84);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED84);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2R _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2R _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2R _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2R _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_INI2R _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIM _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED82);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIM _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED82);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIM _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED82);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIM _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED82);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED82);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIMR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIMR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIMR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIMR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIMR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIRX _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDC2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIRX _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDC2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIRX _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDC2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIRX _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDC2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INIRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDC2);
break;
default: error_illegal_ident(); }
}

| label? _TK_INR _TK_A _TK_NEWLINE @{
DO_stmt(0x3C);
}

| label? _TK_INR _TK_B _TK_NEWLINE @{
DO_stmt(0x04);
}

| label? _TK_INR _TK_C _TK_NEWLINE @{
DO_stmt(0x0C);
}

| label? _TK_INR _TK_D _TK_NEWLINE @{
DO_stmt(0x14);
}

| label? _TK_INR _TK_E _TK_NEWLINE @{
DO_stmt(0x1C);
}

| label? _TK_INR _TK_H _TK_NEWLINE @{
DO_stmt(0x24);
}

| label? _TK_INR _TK_L _TK_NEWLINE @{
DO_stmt(0x2C);
}

| label? _TK_INR _TK_M _TK_NEWLINE @{
DO_stmt(0x34);
}

| label? _TK_INX _TK_B _TK_NEWLINE @{
DO_stmt(0x03);
}

| label? _TK_INX _TK_BC _TK_NEWLINE @{
DO_stmt(0x03);
}

| label? _TK_INX _TK_D _TK_NEWLINE @{
DO_stmt(0x13);
}

| label? _TK_INX _TK_DE _TK_NEWLINE @{
DO_stmt(0x13);
}

| label? _TK_INX _TK_H _TK_NEWLINE @{
DO_stmt(0x23);
}

| label? _TK_INX _TK_HL _TK_NEWLINE @{
DO_stmt(0x23);
}

| label? _TK_INX _TK_SP _TK_NEWLINE @{
DO_stmt(0x33);
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_ALTD _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CBM expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0xED00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CLR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CLR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD360000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CLR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CLR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD360000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CLR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_B1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BC1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_BCDE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_C1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_D1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_DE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_E1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_H1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_HL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x02);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x12);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0x36);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HL expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDDF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDDF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDDF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDDF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xDD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xFD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JK1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_JKHL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
DO_stmt(0x76);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_L1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xED7B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xED43, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x83, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xED53, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xDD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xFD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x89, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0x84, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LD expr _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xDB);
add_opcode_nn(0xED73, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDDSR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xED98);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LDISR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xED90);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LSDDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LSDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LSIDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_LSIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xEDF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RES const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SET const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xDB);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xDB);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOE _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDB);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F8E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F86);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_ADD _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD86);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_ALTD _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FA6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xA6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FA6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_AND _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0046+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_BIT const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB46+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CBM expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0xED00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CLR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CLR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD360000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CLR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CLR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD360000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CLR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CMP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FBE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_CP _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x35);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x35);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_DEC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD35);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x34);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x34);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_INC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD34);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_B1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BC1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_BCDE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_C1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_D1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_DE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_E1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_H1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_HL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x02);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x12);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0x36);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HL expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDDF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDDF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDDF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDDF);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xDD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xFD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JK1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_JKHL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
DO_stmt(0x76);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_L1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xED7B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xED43, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x83, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xED53, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xDD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xFD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x89, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0x84, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LD expr _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD3);
add_opcode_nn(0xED73, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDDSR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xED98);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LDISR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xED90);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LSDDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LSDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LSIDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_LSIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xEDF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RES const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SET const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xD3);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xD3);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_IOI _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD3);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_IPRES _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_IPSET const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xED00+((expr_value==0?0x46:expr_value==1?0x56:expr_value==2?0x4E:0x5E)));
break;
default: error_illegal_ident(); }
}

| label? _TK_JC expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JEQ expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JGEU expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JGT expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xA2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JGTU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xAA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JK expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JLEU expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JLO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JLT expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xB2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JLTU expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JLZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JM expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_LIL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_DOT _TK_SIS expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0xC5);
DO_stmt(0xC9);
}

| label? _TK_JMP _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED98);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0xD5);
DO_stmt(0xC9);
}

| label? _TK_JMP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0xE9);
}

| label? _TK_JMP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_GT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xA2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xAA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nnn_end(0xCA, end_label, 0);
DO_stmt_nnn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_K _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0x5B);
add_opcode_nnn_end(0xCA, end_label, 0);
DO_stmt(0x5B);
DO_stmt_nnn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
DO_stmt(0x5B);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LIL_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xB2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_LZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_NK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_NX5 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0x40);
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt(0x40);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
DO_stmt(0x40);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_SIS_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xBA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_X5 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JMP_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JNC expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JNE expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JNK expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JNV expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JNX5 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JNZ expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_JP _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_LIL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_DOT _TK_SIS expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0xC5);
DO_stmt(0xC9);
}

| label? _TK_JP _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED98);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0xD5);
DO_stmt(0xC9);
}

| label? _TK_JP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0xE9);
}

| label? _TK_JP _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_JP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JPE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JPO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_GT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xA2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xAA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nnn_end(0xCA, end_label, 0);
DO_stmt_nnn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_K _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0x5B);
add_opcode_nnn_end(0xCA, end_label, 0);
DO_stmt(0x5B);
DO_stmt_nnn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
DO_stmt(0x5B);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LIL_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xB2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_LZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_NK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_NX5 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
DO_stmt(0x40);
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt(0x40);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
DO_stmt(0x40);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_M _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_NV _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_P _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_PE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_PO _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_SIS_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xBA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_X5 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JP_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x18);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC3, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDDB);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDD3);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_GT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_LT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDDB);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDD3);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_JRE_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_jre(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_C _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x38);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_EQ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x28);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_GEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x30);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_GT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0xA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_GTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0xA8);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
DO_stmt_jr(0x30);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_LEU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_jr(0x28, Expr1_clone(expr));
add_opcode_jr(0x38, Expr1_clone(expr));
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_LT _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_LTU _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x38);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_NC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x30);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_NE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x20);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_NZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x20);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_V _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0xB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_JR_Z _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_jr(0x28);
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JV expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xBA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JX5 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_JZ expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_C expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_EQ expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_GEU expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_GT expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xA2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_GTU expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xAA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
DO_stmt_nn(0xD2);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_LEU expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_LO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_LT expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xB2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_LTU expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_LZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_M expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_NC expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xD2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_NE expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_NV expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_NZ expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xC2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_J_P expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xF2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_PE expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_PO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xE2, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_V expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xBA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_J_Z expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xCA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LD _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x78);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F78);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x79);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F79);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_EIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_HTR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED50);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_I _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x0A);
DO_stmt(0x0B);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x0A);
DO_stmt(0x03);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x0A);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xF2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x1A);
DO_stmt(0x1B);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x1A);
DO_stmt(0x13);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x1A);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x3A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x2A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x7E);
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x3A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x2A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x8D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xAD00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xBD00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_MB _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_R _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0087+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0087+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0017);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0017);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0007);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0007);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0027);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0027);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA _TK_XPC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt_n(0x3E); }
break;
case CPU_GBZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt_n(0x3E); }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt_n(0x3E); }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x78);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F78);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x79);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F79);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_EIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_HTR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED50);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY _TK_PLUS _TK_A _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x8D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xAD00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xBD00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x7D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA _TK_XPC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt(0x76);
DO_stmt_n(0x3E); }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x47);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F47);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x40);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F40);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x41);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F41);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x42);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F42);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x43);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F43);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x44);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F44);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x46);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x46);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x46);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
DO_stmt(0x23);
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
DO_stmt(0x23);
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD44);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD45);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD44);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD45);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x45);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F45);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0080+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0080+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0010);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0010);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0018);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0018);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0008);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0008);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0020);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0020);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0028);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0028);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0038);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0038);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x06);
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x47);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F47);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x40);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F40);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x41);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F41);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x42);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F42);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x43);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F43);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x44);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F44);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x45);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F45);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_B1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x42);
DO_stmt(0x4B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F42);
DO_stmt(0x7F4B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x44);
DO_stmt(0x4D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x91);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4E);
DO_stmt(0x23);
DO_stmt(0x46);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4E);
DO_stmt(0x23);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD0700);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD4E00);
DO_stmt(0xDD4601);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD07);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xDD4E, 0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD0700);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD4E00);
DO_stmt(0xFD4601);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD07);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xFD4E, 0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D10);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D20);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD44);
DO_stmt(0xDD4D);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xDDE5);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD44);
DO_stmt(0xFD4D);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xFDE5);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED49);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED41);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7691);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D10);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D20);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D30);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BC1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDEE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xDDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDCD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDDD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDFD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt_d(0xA3); }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDEE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xDDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDCD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDDD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDFD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_BCDE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x93, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt(0x76);
DO_stmt_d(0xA3); }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x48);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F48);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x49);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F49);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x4E);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x4E);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x4E);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
DO_stmt(0x23);
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
DO_stmt(0x23);
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0081+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0081+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0011);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0011);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0001);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0001);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0019);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0019);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0009);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0009);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0021);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0021);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0029);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0029);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0039);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0039);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x0E);
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x48);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F48);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x49);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F49);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x4D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_C1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x57);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x50);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F50);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x51);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F51);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x52);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F52);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x53);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F53);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x54);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x66);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x66);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x66);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
DO_stmt(0x23);
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
DO_stmt(0x23);
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x55);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0082+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0082+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0012);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0012);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0002);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0002);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0022);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0022);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x16);
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x57);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x50);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F50);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x51);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F51);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x52);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F52);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x53);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F53);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x54);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x55);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_D1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x16);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x50);
DO_stmt(0x59);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F50);
DO_stmt(0x7F59);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x54);
DO_stmt(0x5D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_HL expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE5);
DO_stmt_n_0(0x11);
DO_stmt(0x19);
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
DO_stmt(0xE1);
break;
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE5);
DO_stmt_n_0(0x11);
DO_stmt(0x19);
DO_stmt(0xEB);
DO_stmt(0xE1);
break;
case CPU_8085: 
DO_stmt_n(0x28);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD1700);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD5E00);
DO_stmt(0xDD5601);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD17);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xDD5E, 0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD1700);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD5E00);
DO_stmt(0xFD5601);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD17);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xFD5E, 0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D42);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D40);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D52);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D50);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D62);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D60);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD54);
DO_stmt(0xDD5D);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xDDE5);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD54);
DO_stmt(0xFD5D);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xFDE5);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0x3800);
break;
case CPU_GBZ80: 
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
DO_stmt(0x210000);
DO_stmt(0x39);
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
break;
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x210000);
DO_stmt(0x39);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA _TK_SP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
DO_stmt_n_0(0x21);
DO_stmt(0x39);
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
break;
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt_n_0(0x21);
DO_stmt(0x39);
DO_stmt(0xEB);
break;
case CPU_8085: 
DO_stmt_n(0x38);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xEB);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
DO_stmt(0xEB);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED59);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED51);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76B1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D42);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D40);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D52);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D50);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D62);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D60);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_IL _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_IL expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_IS _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_IS expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_SP _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_SP _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_L _TK_SP _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xED7B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0x31, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL expr _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xED43, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL expr _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xED53, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xDD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xFD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIL expr _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x5B);
add_opcode_nnn(0xED73, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_SP _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_SP _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS _TK_SP _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_LIS expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x49);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_SP _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_SP _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_S _TK_SP _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD4600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD0700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD4E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD5600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD1700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD2700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD3700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_SP _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_SP _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL _TK_SP _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIL expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x52);
add_opcode_nnn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xED4B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xED5B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xED7B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0x31, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS expr _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xED43, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS expr _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xED53, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xDD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xFD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_DOT _TK_SIS expr _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x40);
add_opcode_nn(0xED73, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x58);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F58);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x59);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F59);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x6E);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x6E);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x6E);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
DO_stmt(0x23);
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
DO_stmt(0x23);
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0083+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0083+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0013);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0013);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0003);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0003);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0023);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0023);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x1E);
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x58);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F58);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x59);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F59);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD5E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x5D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_E1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_EIR _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED47);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x67);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x60);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F60);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x61);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F61);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x62);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F62);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x63);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F63);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x64);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x56);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x56);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x56);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
DO_stmt(0x23);
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
DO_stmt(0x23);
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x65);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F65);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0084+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0084+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0014);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0014);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0004);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0004);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0024);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0024);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x26);
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x67);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x60);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F60);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x61);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F61);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x62);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F62);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x63);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F63);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x64);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x65);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F65);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_H1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x60);
DO_stmt(0x69);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x81);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x62);
DO_stmt(0x6B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_I _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDD7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7E);
DO_stmt(0x23);
DO_stmt(0x66);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE400);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED27);
break;
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7E);
DO_stmt(0x23);
DO_stmt(0x66);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD2700);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD6E00);
DO_stmt(0xDD6601);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD27);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xE4);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xDD6E, 0xDD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD2700);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD6E00);
DO_stmt(0xFD6601);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD27);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFDE4);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xFD6E, 0xFD66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PW _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x8500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PX _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED16);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PY _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xA500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xC400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD7C);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD7C);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_LXPC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x210000);
DO_stmt(0x39);
break;
case CPU_8085: 
DO_stmt(0xEB);
DO_stmt(0x3800);
DO_stmt(0xEB);
break;
case CPU_GBZ80: 
DO_stmt(0xF800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA _TK_SP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xEB);
DO_stmt_n(0x38);
DO_stmt(0xEB);
break;
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0xF8);
break;
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_s_0(0x21);
DO_stmt(0x39);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD5);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x62);
DO_stmt(0x6B);
DO_stmt(0xD1);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7681);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76A1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0xED61);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_HL expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDE400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x8500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x85);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED16);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xA500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xB500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xC400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA _TK_LXPC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_HTR _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED40);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_I _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED47);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_I _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDC7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IIR _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED4F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_BC _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x02);
DO_stmt(0x0B);
}

| label? _TK_LD _TK_IND_BC _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x02);
DO_stmt(0x03);
}

| label? _TK_LD _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x02);
}

| label? _TK_LD _TK_IND_C _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x12);
DO_stmt(0x1B);
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x70);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x71);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x74);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x75);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x72);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x73);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xEB);
DO_stmt_n(0x36);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x12);
DO_stmt(0x13);
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x70);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x71);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x74);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x75);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x72);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x73);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xEB);
DO_stmt_n(0x36);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x12);
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x70);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x71);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x74);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x75);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x72);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x73);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_DE _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xEB);
DO_stmt_n(0x36);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x32);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x36);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x22);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x71);
DO_stmt(0x23);
DO_stmt(0x70);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0x75);
DO_stmt(0x23);
DO_stmt(0x77);
DO_stmt(0xF1);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0xDDE5);
DO_stmt(0xD1);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x23);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0xFDE5);
DO_stmt(0xD1);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x23);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x36);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x77);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x71);
DO_stmt(0x23);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDF400);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED2F);
break;
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0x75);
DO_stmt(0x23);
DO_stmt(0x77);
DO_stmt(0xF1);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0xDDE5);
DO_stmt(0xD1);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x2B);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0xFDE5);
DO_stmt(0xD1);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x2B);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
}

| label? _TK_LD _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x36);
}

| label? _TK_LD _TK_IND_HL expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDDF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x32);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HLD _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x22);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_HLI _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
DO_stmt(0x23);
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD0F00);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7100);
DO_stmt(0xDD7001);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDCF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD1F00);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7300);
DO_stmt(0xDD7201);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD2F00);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7500);
DO_stmt(0xDD7401);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD3F00);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt(0xDD7500);
DO_stmt(0xDD7401);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt(0xDD7500);
DO_stmt(0xDD7401);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD3E00);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt(0xDD7500);
DO_stmt(0xDD7401);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt(0xDD7500);
DO_stmt(0xDD7401);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDCF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD0F);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xDD71, 0xDD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDDCF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD1F);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xDD73, 0xDD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD2F);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xF4);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xDD75, 0xDD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xDD75, 0xDD74);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xDD75, 0xDD74);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xDD75, 0xDD74);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xDD75, 0xDD74);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFDCF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IX expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_idx_n(0xDD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7700);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD0F00);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7100);
DO_stmt(0xFD7001);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDDF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD1F00);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7300);
DO_stmt(0xFD7201);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD2F00);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7500);
DO_stmt(0xFD7401);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDF400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt(0xFD7500);
DO_stmt(0xFD7401);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt(0xFD7500);
DO_stmt(0xFD7401);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD3F00);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt(0xFD7500);
DO_stmt(0xFD7401);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt(0xFD7500);
DO_stmt(0xFD7401);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDDF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD7500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFD3600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD0F);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xFD71, 0xFD70);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDDDF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD1F);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xFD73, 0xFD72);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD2F);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFDF4);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx_idx1(0xFD75, 0xFD74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xFD75, 0xFD74);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xFD75, 0xFD74);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xFD75, 0xFD74);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xFD75, 0xFD74);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFDDF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_IY expr _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_idx_n(0xFD36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_BC _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D43);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D83);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x8E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x8600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD0F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D01);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D41);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x86);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D81);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D09);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D49);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D89);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PW expr _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DC9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_BC _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D53);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D93);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD3);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DDB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD1F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D11);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D51);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D91);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D19);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D59);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D99);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PX expr _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_BC _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D63);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xA600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD2F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D21);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D61);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DA1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D29);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PY expr _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_BC _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D73);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DFB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xBE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD3F00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF900);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xDD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D71);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D39);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D79);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DB9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_PZ expr _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDFF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDFF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDEF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xD400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDD400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDD400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDEF00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED0500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED1500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED2500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED3500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xDDEF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xDDD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xFDD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xFDEF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED05);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED15);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED25);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IND_SP expr _TK_RPAREN _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xC5);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD60);
DO_stmt(0xDD69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xD5);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD62);
DO_stmt(0xDD6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD7D);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE5);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x23);
DO_stmt(0xD5);
DO_stmt(0xDDE1);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x2B);
DO_stmt(0xD5);
DO_stmt(0xDDE1);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD3700);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt(0xDD6E00);
DO_stmt(0xDD6601);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt(0xDD6E00);
DO_stmt(0xDD6601);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xDD6E, 0xDD66);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xDD6E, 0xDD66);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt(0xFD6E00);
DO_stmt(0xFD6601);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt(0xFD6E00);
DO_stmt(0xFD6601);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD3100);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xFD6E, 0xFD66);
DO_stmt(0xE3);
DO_stmt(0xDDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xFD6E, 0xFD66);
DO_stmt(0xED54);
DO_stmt(0xDDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D82);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D80);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D92);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D90);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDC400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xDDC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD60);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD61);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD62);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD63);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD65);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXH _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDD26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD68);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IXL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xC5);
DO_stmt(0xFDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD60);
DO_stmt(0xFD69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
DO_stmt(0xD5);
DO_stmt(0xFDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD62);
DO_stmt(0xFD6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE5);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x23);
DO_stmt(0xD5);
DO_stmt(0xFDE1);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x2B);
DO_stmt(0xD5);
DO_stmt(0xFDE1);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xDD3100);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt(0xDD6E00);
DO_stmt(0xDD6601);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt(0xDD6E00);
DO_stmt(0xDD6601);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xDD6E, 0xDD66);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xDD6E, 0xDD66);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xDD31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xFD3700);
break;
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt(0xFD6E00);
DO_stmt(0xFD6601);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt(0xFD6E00);
DO_stmt(0xFD6601);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
DO_stmt(0xE3);
DO_stmt_idx_idx1(0xFD6E, 0xFD66);
DO_stmt(0xE3);
DO_stmt(0xFDE1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDE5);
DO_stmt(0xED54);
DO_stmt_idx_idx1(0xFD6E, 0xFD66);
DO_stmt(0xED54);
DO_stmt(0xFDE1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xFD37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF000);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDC400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xFDC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFD2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFD21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD60);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD61);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD62);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD63);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD65);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYH _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFD26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD68);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_IYL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xFD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JK _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xA9, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JK1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x99, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xA9, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDEE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xFDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDCD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDDD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDFD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt_d(0xA4); }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDDE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD0E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD1E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD2E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD3E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_SP _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDEE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xFDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDCD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDDD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDFD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_JKHL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0x94, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { DO_stmt(0x76);
DO_stmt_d(0xA4); }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x68);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F68);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x69);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_DE _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x5E);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_DE _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x5E);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x5E);
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
DO_stmt(0x23);
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
DO_stmt(0x2B);
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
DO_stmt(0x23);
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0085+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0085+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0015);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0015);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0005);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0005);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0025);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0025);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x2E);
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x68);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F68);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x69);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F69);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_HLD _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_HLI _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD6E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x6D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_L1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0x2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_LXPC _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x97);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_MB _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_HTR _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED01);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D08);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D18);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D28);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D38);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED0400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED04);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD8D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D04);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D05);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PW expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D16);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D14);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D15);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D24);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D25);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA _TK_PZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnnn(0xED0C, Expr1_clone(expr));
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D08);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D18);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D28);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D38);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D07);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D06);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D04);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D05);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D17);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D16);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D14);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D15);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D27);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D26);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D24);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D25);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D37);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D36);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PW1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D35);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_HTR _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED11);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D48);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D58);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D68);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D78);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED1400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED14);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D47);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D44);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D45);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PW expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D65);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D76);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA _TK_PZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnnn(0xED1C, Expr1_clone(expr));
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D48);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D58);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D68);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D78);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D47);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D46);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D4E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D44);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D45);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D57);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D56);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D5E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D66);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D65);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D77);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D76);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D74);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PX1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D75);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_HTR _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED21);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D88);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6D98);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED2400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D87);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D86);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D84);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D85);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PW expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D97);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D96);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D94);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6D95);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6D9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6DAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA _TK_PZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6DBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnnn(0xED2C, Expr1_clone(expr));
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D8A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D8800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D88);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D9800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6D98);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DBA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D87);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D86);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D8E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D84);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D85);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D97);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D96);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D94);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6D95);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DBE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PY1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_HTR _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED31);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DDA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DEA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DFA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_idx(0x6DF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED3400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDBD);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PW expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6DCC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6DDC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6DEC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x6DF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA _TK_PZ expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0x6DFC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnnn(0xED3C, Expr1_clone(expr));
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PW _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DCA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PW _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PW expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PX _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DDA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PY _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DEA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PZ _TK_PLUS _TK_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DFA);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PZ _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF800);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_IND_PZ expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0x6DF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PW _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PW _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DCE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PW _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PW _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PX _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PX _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PX _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PX _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PY _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PY _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PY _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PY _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PZ _TK_PLUS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PZ _TK_PLUS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DFE);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_PZ1 _TK_COMMA _TK_PZ _TK_PLUS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x6DF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_R _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED4F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_SP _TK_COMMA _TK_HL _TK_NEWLINE @{
DO_stmt(0xF9);
}

| label? _TK_LD _TK_SP _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_SP _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x31, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED7B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x31, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
case CPU_EZ80: 
if (expr_in_parens) { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED7B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} } else { {
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x31, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
} }
break;
default: error_illegal_ident(); }
}

| label? _TK_LD _TK_XPC _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED67);
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_GBZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xF5);
DO_stmt(0x79);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
DO_stmt(0x78);
add_opcode_nn(0x32, Expr1_clone(expr), 1);
DO_stmt(0xF1);
OBJ_DELETE(expr);
}
break;
case CPU_GBZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xF5);
DO_stmt(0x79);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
DO_stmt(0x78);
add_opcode_nn(0xEA, Expr1_clone(expr), 1);
DO_stmt(0xF1);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED43, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED43, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x83, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xEB);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
DO_stmt(0xEB);
OBJ_DELETE(expr);
}
break;
case CPU_GBZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xF5);
DO_stmt(0x7B);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
DO_stmt(0x7A);
add_opcode_nn(0xEA, Expr1_clone(expr), 1);
DO_stmt(0xF1);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED53, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED53, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD5);
DO_stmt(0xE5);
DO_stmt(0x54);
DO_stmt(0x5D);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0xE1);
DO_stmt(0xD1);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFD22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x89, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x84, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LD expr _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xE5);
DO_stmt(0x210200);
DO_stmt(0x39);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
DO_stmt(0xE1);
OBJ_DELETE(expr);
}
break;
case CPU_GBZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x08, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED73, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_EZ80: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED73, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDAX _TK_B _TK_NEWLINE @{
DO_stmt(0x0A);
}

| label? _TK_LDAX _TK_BC _TK_NEWLINE @{
DO_stmt(0x0A);
}

| label? _TK_LDAX _TK_D _TK_NEWLINE @{
DO_stmt(0x1A);
}

| label? _TK_LDAX _TK_DE _TK_NEWLINE @{
DO_stmt(0x1A);
}

| label? _TK_LDD _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x0A);
DO_stmt(0x0B);
}

| label? _TK_LDD _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x1A);
DO_stmt(0x1B);
}

| label? _TK_LDD _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x3A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_B _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x46);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_C _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x4E);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_D _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x66);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_E _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x6E);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_H _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x56);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x02);
DO_stmt(0x0B);
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x12);
DO_stmt(0x1B);
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x70);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x71);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x74);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x75);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x72);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x73);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_DE _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xEB);
DO_stmt_n(0x36);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x32);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x77);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x36);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_L _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x5E);
DO_stmt(0xEB);
DO_stmt(0x1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDD _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
DO_stmt(0x2B);
}

| label? _TK_LDD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__ldd");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__lddr");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDB8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDSR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED98);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDDX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x9A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0x9A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_BC _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_BC1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_BCDE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDD0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_BCDE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xDD0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_DE _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED1A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_DE1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED1A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x92, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_HL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0x92, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED3A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_JKHL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFD0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_JKHL1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xFD0A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PW _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED08, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PW1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED08, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED18, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PX1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED18, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED28, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PY1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED28, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED38, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF _TK_PZ1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nnn(0xED38, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x8A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED0B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xDD0B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED1B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0x82, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED2B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED3B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xFD0B, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED09, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED19, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED29, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDF expr _TK_COMMA _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nnn(0xED39, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDH _TK_A _TK_COMMA _TK_IND_C _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xF2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDH _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (!expr_in_parens) return false;
DO_stmt_h(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDH _TK_IND_C _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE2);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDH expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (!expr_in_parens) return false;
DO_stmt_h(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDHI expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x28);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDHL _TK_SP _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_d(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x0A);
DO_stmt(0x03);
}

| label? _TK_LDI _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x1A);
DO_stmt(0x13);
}

| label? _TK_LDI _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x2A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_B _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x46);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x46);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4E);
DO_stmt(0x23);
DO_stmt(0x46);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_C _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x4E);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x4E);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_D _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x66);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x56);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_BC _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x0A);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x1A);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x7E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_B _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x46);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED07);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_C _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x4E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_D _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x56);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED17);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x5E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x66);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x02);
DO_stmt(0x03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x12);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x70);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x71);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x72);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x73);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x74);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x75);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_stmt_n(0x36);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x6E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_E _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x6E);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_E _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x5E);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_H _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x56);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_H _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x66);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED27);
DO_stmt(0x23);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7E);
DO_stmt(0x23);
DO_stmt(0x66);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x02);
DO_stmt(0x03);
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x12);
DO_stmt(0x13);
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x70);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x71);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x74);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x75);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x72);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x73);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_DE _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0xEB);
DO_stmt_n(0x36);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x22);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x77);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x71);
DO_stmt(0x23);
DO_stmt(0x70);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED0F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x23);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED1F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED2F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0x75);
DO_stmt(0x23);
DO_stmt(0x77);
DO_stmt(0xF1);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0xDDE5);
DO_stmt(0xD1);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x23);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3F);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0xFDE5);
DO_stmt(0xD1);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0x23);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3E);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IND_HL _TK_RPAREN _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x36);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_IX _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x23);
DO_stmt(0xD5);
DO_stmt(0xDDE1);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED37);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_IY _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xD5);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x23);
DO_stmt(0xD5);
DO_stmt(0xFDE1);
DO_stmt(0xD1);
break;
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED31);
DO_stmt(0x23);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_L _TK_COMMA _TK_IND_DE _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
DO_stmt(0x5E);
DO_stmt(0xEB);
DO_stmt(0x13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDI _TK_L _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
DO_stmt(0x6E);
DO_stmt(0x23);
}

| label? _TK_LDI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__ldi");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDA0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__ldir");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDISR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED90);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDIX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED0D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD8C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PW1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED0D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED1D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PX1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED1D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED2D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PY1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED2D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt_n(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED3D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBF);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA _TK_IND_SP _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA _TK_IND_SP expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_n(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDL _TK_PZ1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0x76);
add_opcode_nn(0xED3D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_HL _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_HL _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_HL _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_HL _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED6D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_IND_HL _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD64);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_IX _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD6D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP _TK_IY _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD6D, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP expr _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xED65, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP expr _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xDD65, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDP expr _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (!expr_in_parens) return false;
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xFD65, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LDPIRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDSI expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x38);
break;
default: error_illegal_ident(); }
}

| label? _TK_LDWS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDA5);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_BC _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED0200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_BC _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_BC _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_BC _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DE _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED1200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DE _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DE _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DE _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_BC _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_DE _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED5400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IX _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED5500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_L _TK_IY _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_BC _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_DE _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED5400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IX _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED5500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_LIS _TK_IY _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_BC _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_DE _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED5400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IX _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED5500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_S _TK_IY _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED0300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_BC _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED03);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED12);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED1300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_DE _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED13);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED5400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IX _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED5500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_DOT _TK_SIL _TK_IY _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_HL _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED2200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_HL _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED22);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_HL _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED2300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_HL _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IX _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3200);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IX _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED32);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IX _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED5400);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IX _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED54);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IY _TK_COMMA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED5500);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IY _TK_COMMA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED55);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IY _TK_COMMA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED3300);
break;
default: error_illegal_ident(); }
}

| label? _TK_LEA _TK_IY _TK_COMMA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED33);
break;
default: error_illegal_ident(); }
}

| label? _TK_LHLD expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD5);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x5E);
DO_stmt(0x23);
DO_stmt(0x56);
DO_stmt(0x62);
DO_stmt(0x6B);
DO_stmt(0xD1);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x2A, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_LHLDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LHLX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xED);
break;
default: error_illegal_ident(); }
}

| label? _TK_LIRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_LPRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xEDB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_LSDDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LSDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_LSIDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LSIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_LXI _TK_B _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LXI _TK_BC _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x01, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LXI _TK_D _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LXI _TK_DE _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x11, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LXI _TK_H _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LXI _TK_HL _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_LXI _TK_SP _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x31, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
}

| label? _TK_MIRR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_MIRROR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED30);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_DOT _TK_L _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_DOT _TK_LIS _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_DOT _TK_S _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_DOT _TK_SIL _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MLT _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
if (expr_value < 0 || expr_value > 7) error_int_range(expr_value);
DO_stmt(0xED9250 + expr_value);}
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU const_expr _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
if (expr_value < 0 || expr_value > 7) error_int_range(expr_value);
DO_stmt_n(0xED9150 + expr_value);}
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU0 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9250);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU0 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9150);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU1 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9251);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU1 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9151);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU2 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9252);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU2 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9152);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU3 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9253);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU3 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9153);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU4 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9254);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU4 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9154);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU5 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9255);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU5 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9155);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU6 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9256);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU6 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9156);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU7 _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED9257);
break;
default: error_illegal_ident(); }
}

| label? _TK_MMU7 expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED9157);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x78);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F78);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x79);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F79);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7A);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7B);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x7D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_A _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x7E);
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x47);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F47);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x40);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F40);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x41);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F41);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x42);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F42);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x43);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F43);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x44);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F44);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x45);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F45);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_B _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x46);
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4F);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x48);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F48);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x49);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F49);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4A);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4B);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x4D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_C _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x4E);
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x57);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F57);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x50);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F50);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x51);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F51);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x52);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F52);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x53);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F53);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x54);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F54);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x55);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F55);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_D _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x56);
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5F);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x58);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F58);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x59);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F59);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5A);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5B);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x5D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F5D);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_E _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x5E);
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x67);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F67);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x60);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F60);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x61);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F61);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x62);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F62);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x63);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F63);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x64);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F64);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x65);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F65);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_H _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x66);
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6F);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x68);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F68);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x69);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F69);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6A);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6A);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6B);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6B);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6C);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6C);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x6D);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F6D);
break;
default: error_illegal_ident(); }
}

| label? _TK_MOV _TK_L _TK_COMMA _TK_M _TK_NEWLINE @{
DO_stmt(0x6E);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_A _TK_NEWLINE @{
DO_stmt(0x77);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_B _TK_NEWLINE @{
DO_stmt(0x70);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_C _TK_NEWLINE @{
DO_stmt(0x71);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_D _TK_NEWLINE @{
DO_stmt(0x72);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_E _TK_NEWLINE @{
DO_stmt(0x73);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_H _TK_NEWLINE @{
DO_stmt(0x74);
}

| label? _TK_MOV _TK_M _TK_COMMA _TK_L _TK_NEWLINE @{
DO_stmt(0x75);
}

| label? _TK_MUL _TK_D _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED30);
break;
default: error_illegal_ident(); }
}

| label? _TK_MUL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED30);
break;
default: error_illegal_ident(); }
}

| label? _TK_MUL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF7);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xA7);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDF9);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDC9);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUB _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDE9);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUW _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUW _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDD3);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUW _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDE3);
break;
default: error_illegal_ident(); }
}

| label? _TK_MULUW _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: 
DO_stmt(0xEDF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_MVI _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x3E);
}

| label? _TK_MVI _TK_B _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x06);
}

| label? _TK_MVI _TK_C _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x0E);
}

| label? _TK_MVI _TK_D _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x16);
}

| label? _TK_MVI _TK_E _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x1E);
}

| label? _TK_MVI _TK_H _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x26);
}

| label? _TK_MVI _TK_L _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x2E);
}

| label? _TK_MVI _TK_M _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0x36);
}

| label? _TK_NEG _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_stmt(0x2F3C);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED44);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED44);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76DD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x764D);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76FD4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEG _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_stmt(0x2F3C);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED44);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEXTREG expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_NEXTREG expr _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n_n(0xED91);
break;
default: error_illegal_ident(); }
}

| label? _TK_NOP _TK_NEWLINE @{
DO_stmt(0x00);
}

| label? _TK_NREG expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED92);
break;
default: error_illegal_ident(); }
}

| label? _TK_NREG expr _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n_n(0xED91);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB7);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB0);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB2);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB4);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB5);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xF6);
}

| label? _TK_OR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB7);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB7);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB0);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB1);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB2);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB3);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB4);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB6);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FB5);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB0);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB2);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB4);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xB0);
DO_stmt(0x67);
DO_stmt(0x7D);
DO_stmt(0xB1);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF5);
DO_stmt(0x7F7C);
DO_stmt(0x7FB0);
DO_stmt(0x7F67);
DO_stmt(0x7F7D);
DO_stmt(0x7FB1);
DO_stmt(0x7F6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xB2);
DO_stmt(0x67);
DO_stmt(0x7D);
DO_stmt(0xB3);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDB600);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xB0);
DO_stmt(0xDD67);
DO_stmt(0xDD7D);
DO_stmt(0xB1);
DO_stmt(0xDD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDEC);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xB2);
DO_stmt(0xDD67);
DO_stmt(0xDD7D);
DO_stmt(0xB3);
DO_stmt(0xDD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xB0);
DO_stmt(0xFD67);
DO_stmt(0xFD7D);
DO_stmt(0xB1);
DO_stmt(0xFD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xB2);
DO_stmt(0xFD67);
DO_stmt(0xFD7D);
DO_stmt(0xB3);
DO_stmt(0xFD6F);
DO_stmt(0xF1);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDEC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_JKHL1 _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDF6);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB5);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_OR expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xF6);
}

| label? _TK_ORA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB7);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB7);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB0);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB0);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB1);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB2);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB2);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB3);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB4);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB5);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB5);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORA _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FB6);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xB6);
break;
default: error_illegal_ident(); }
}

| label? _TK_ORI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xF6);
}

| label? _TK_OTD2R _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTD2R _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTD2R _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTD2R _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTD2R _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDBC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDM _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDM _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDM _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDM _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED8B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDMR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDMR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDMR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDMR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDMR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDBB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDRX _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDRX _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDRX _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDRX _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTDRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTI2R _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTI2R _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTI2R _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTI2R _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTI2R _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDB4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIB _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED90);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIM _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIM _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIM _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIM _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIMR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIMR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIMR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIMR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIMR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIR _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIR _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIR _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIR _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDB3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIRX _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIRX _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIRX _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIRX _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OTIRX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDC3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED79);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED41);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED49);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED51);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED59);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_F _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED71);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED61);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED69);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_BC _TK_RPAREN _TK_COMMA const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xED00+((0x41+expr_value+6*8)));
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED79);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED41);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED49);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED51);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED59);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_F _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R800: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED71);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED61);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED69);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT _TK_IND_C _TK_RPAREN _TK_COMMA const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xED00+((0x41+expr_value+6*8)));
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (!expr_in_parens) return false;
DO_stmt_n(0xD3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xD3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED39);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED01);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED09);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED11);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED19);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED21);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUT0 expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (!expr_in_parens) return false;
DO_stmt_n(0xED29);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD2 _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD2 _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD2 _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD2 _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTD2 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEDA3);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI2 _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI2 _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI2 _TK_DOT _TK_S _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI2 _TK_DOT _TK_SIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTI2 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xEDA4);
break;
default: error_illegal_ident(); }
}

| label? _TK_OUTINB _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED90);
break;
default: error_illegal_ident(); }
}

| label? _TK_OVRST8 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_PCHL _TK_NEWLINE @{
DO_stmt(0xE9);
}

| label? _TK_PEA _TK_DOT _TK_L _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED6500);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_L _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED65);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_L _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_L _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED66);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_LIS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED6500);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_LIS _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED65);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_LIS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_LIS _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xED66);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_S _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED6500);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_S _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED65);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_S _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_S _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED66);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_SIL _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED6500);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_SIL _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED65);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_SIL _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_DOT _TK_SIL _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xED66);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED6500);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_IX expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED65);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED6600);
break;
default: error_illegal_ident(); }
}

| label? _TK_PEA _TK_IY expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt_idx(0xED66);
break;
default: error_illegal_ident(); }
}

| label? _TK_PIXELAD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_PIXELDN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_AF _TK_NEWLINE @{
DO_stmt(0xF1);
}

| label? _TK_POP _TK_AF1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_B _TK_NEWLINE @{
DO_stmt(0xC1);
}

| label? _TK_POP _TK_BC _TK_NEWLINE @{
DO_stmt(0xC1);
}

| label? _TK_POP _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_D _TK_NEWLINE @{
DO_stmt(0xD1);
}

| label? _TK_POP _TK_DE _TK_NEWLINE @{
DO_stmt(0xD1);
}

| label? _TK_POP _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_L _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_L _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_L _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_L _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_L _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_L _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_LIS _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_LIS _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_LIS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_LIS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_LIS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_LIS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_S _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_S _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_S _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_S _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_S _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_S _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_SIL _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_SIL _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_SIL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_SIL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_SIL _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_DOT _TK_SIL _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_H _TK_NEWLINE @{
DO_stmt(0xE1);
}

| label? _TK_POP _TK_HL _TK_NEWLINE @{
DO_stmt(0xE1);
}

| label? _TK_POP _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_IP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PSW _TK_NEWLINE @{
DO_stmt(0xF1);
}

| label? _TK_POP _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PW1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDC1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PX1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDD1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PY1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDE1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_PZ1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_POP _TK_SU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xED6E);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_AF _TK_NEWLINE @{
DO_stmt(0xF5);
}

| label? _TK_PUSH _TK_B _TK_NEWLINE @{
DO_stmt(0xC5);
}

| label? _TK_PUSH _TK_BC _TK_NEWLINE @{
DO_stmt(0xC5);
}

| label? _TK_PUSH _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_D _TK_NEWLINE @{
DO_stmt(0xD5);
}

| label? _TK_PUSH _TK_DE _TK_NEWLINE @{
DO_stmt(0xD5);
}

| label? _TK_PUSH _TK_DOT _TK_L _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_L _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_L _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_L _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_L _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_L _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_LIS _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_LIS _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_LIS _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_LIS _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_LIS _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_LIS _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_S _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_S _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_S _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_S _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_S _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_S _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_SIL _TK_AF _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_SIL _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_SIL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_SIL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_SIL _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_DOT _TK_SIL _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_H _TK_NEWLINE @{
DO_stmt(0xE5);
}

| label? _TK_PUSH _TK_HL _TK_NEWLINE @{
DO_stmt(0xE5);
}

| label? _TK_PUSH _TK_IP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED76);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_PSW _TK_NEWLINE @{
DO_stmt(0xF5);
}

| label? _TK_PUSH _TK_PW _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDC5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_PX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_PY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDE5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_PZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDF5);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH _TK_SU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xED66);
break;
default: error_illegal_ident(); }
}

| label? _TK_PUSH expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt_NN(0xED8A);
break;
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEDA5, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_PXAD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED94);
break;
default: error_illegal_ident(); }
}

| label? _TK_PXDN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED93);
break;
default: error_illegal_ident(); }
}

| label? _TK_RAL _TK_NEWLINE @{
DO_stmt(0x17);
}

| label? _TK_RAR _TK_NEWLINE @{
DO_stmt(0x1F);
}

| label? _TK_RC _TK_NEWLINE @{
DO_stmt(0xD8);
}

| label? _TK_RDEL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rl_de");
break;
case CPU_8085: 
DO_stmt(0x18);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB13);
DO_stmt(0xCB12);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_RDMODE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xED7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_REQ _TK_NEWLINE @{
DO_stmt(0xC8);
}

| label? _TK_RES _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0087+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0080+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0081+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0082+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0083+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0084+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0085+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0087+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0080+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0081+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0082+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0083+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0084+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0085+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB0086+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB87+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB80+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB81+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB82+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB83+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB84+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCB86+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RES const_expr _TK_COMMA _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCB85+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RET _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC9);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC9);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET _TK_DOT _TK_LIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC9);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC9);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET _TK_NEWLINE @{
DO_stmt(0xC9);
}

| label? _TK_RETI _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED4D);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xED4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETI _TK_DOT _TK_LIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xED4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETI _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETI _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xD9);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED4D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETN _TK_DOT _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED45);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xED45);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETN _TK_DOT _TK_LIL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xED45);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETN _TK_DOT _TK_LIS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED45);
break;
default: error_illegal_ident(); }
}

| label? _TK_RETN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED45);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_C _TK_NEWLINE @{
DO_stmt(0xD8);
}

| label? _TK_RET_EQ _TK_NEWLINE @{
DO_stmt(0xC8);
}

| label? _TK_RET_GEU _TK_NEWLINE @{
DO_stmt(0xD0);
}

| label? _TK_RET_GTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
add_opcode_nn_end(0xDA, end_label, 0);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LEU _TK_NEWLINE @{
DO_stmt(0xC8);
DO_stmt(0xD8);
}

| label? _TK_RET_LIL_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_EQ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_GEU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_GTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x5B);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_LEU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC8);
DO_stmt(0x5B);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_LTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_NC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_NE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_NV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_NZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_P _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_PE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_PO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_V _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIL_Z _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_EQ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_GEU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_GTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x49);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_LEU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC8);
DO_stmt(0x49);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_LTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_NC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_NE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_NV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_NZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_P _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_PE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_PO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_V _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LIS_Z _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_LTU _TK_NEWLINE @{
DO_stmt(0xD8);
}

| label? _TK_RET_LZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_EQ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_GEU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_GTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x49);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_EZ80: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0x5B);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_LEU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC8);
DO_stmt(0x49);
DO_stmt(0xD8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC8);
DO_stmt(0x5B);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_LTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_NC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xD0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xD0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_NE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_NV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_NZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_P _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xF0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_PE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_PO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE0);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_V _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xE8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_L_Z _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xC8);
break;
case CPU_EZ80: 
DO_stmt(0x5B);
DO_stmt(0xC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_NC _TK_NEWLINE @{
DO_stmt(0xD0);
}

| label? _TK_RET_NE _TK_NEWLINE @{
DO_stmt(0xC0);
}

| label? _TK_RET_NV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_NZ _TK_NEWLINE @{
DO_stmt(0xC0);
}

| label? _TK_RET_P _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_PE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_PO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_V _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RET_Z _TK_NEWLINE @{
DO_stmt(0xC8);
}

| label? _TK_RGEU _TK_NEWLINE @{
DO_stmt(0xD0);
}

| label? _TK_RGTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
add_opcode_nn_end(0xDA, end_label, 0);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_RIM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0x20);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rl_bc");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x62);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB11);
DO_stmt(0xCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x62);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rl_de");
break;
case CPU_8085: 
DO_stmt(0x18);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB13);
DO_stmt(0xCB12);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rl_hl");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x42);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB15);
DO_stmt(0xCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x42);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0017);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0010);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0011);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0012);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0013);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0014);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0015);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0017);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0010);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0011);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0012);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0013);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0014);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0015);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB0016);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB17);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB10);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB11);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB12);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB13);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB14);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB16);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB15);
break;
default: error_illegal_ident(); }
}

| label? _TK_RL const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0x68:expr_value==2?0x69:expr_value==4?0x6B:0x6F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RL const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x68:expr_value==2?0x69:expr_value==4?0x6B:0x6F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RL const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0x68:expr_value==2?0x69:expr_value==4?0x6B:0x6F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RL const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x68:expr_value==2?0x69:expr_value==4?0x6B:0x6F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RLA _TK_NEWLINE @{
DO_stmt(0x17);
}

| label? _TK_RLA1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x17);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLB _TK_A _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLB _TK_A _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x60);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x60);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x50);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x50);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0007);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0001);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0002);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0003);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0004);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0005);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0007);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0000);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0001);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0002);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0003);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0004);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0005);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB0006);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB07);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB00);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB01);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB02);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB03);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB04);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB06);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB05);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC _TK_NEWLINE @{
DO_stmt(0x07);
}

| label? _TK_RLC const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0x48:expr_value==2?0x49:expr_value==4?0x4B:0x4F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x48:expr_value==2?0x49:expr_value==4?0x4B:0x4F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0x48:expr_value==2?0x49:expr_value==4?0x4B:0x4F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RLC const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x48:expr_value==2?0x49:expr_value==4?0x4B:0x4F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RLCA _TK_NEWLINE @{
DO_stmt(0x07);
}

| label? _TK_RLCA1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x07);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rld");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rl_de");
break;
case CPU_8085: 
DO_stmt(0x18);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB13);
DO_stmt(0xCB12);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF3);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLEU _TK_NEWLINE @{
DO_stmt(0xC8);
DO_stmt(0xD8);
}

| label? _TK_RLO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RLTU _TK_NEWLINE @{
DO_stmt(0xD8);
}

| label? _TK_RLZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RNC _TK_NEWLINE @{
DO_stmt(0xD0);
}

| label? _TK_RNE _TK_NEWLINE @{
DO_stmt(0xC0);
}

| label? _TK_RNV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RNZ _TK_NEWLINE @{
DO_stmt(0xC0);
}

| label? _TK_RP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RPE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RPO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rr_bc");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x63);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB18);
DO_stmt(0xCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x63);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rr_de");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1A);
DO_stmt(0xCB1B);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFB);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFB);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rr_hl");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1C);
DO_stmt(0xCB1D);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFC);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_HL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFC);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0018);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0019);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB001D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0018);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0019);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB001D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB001E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB18);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB1E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDDFC);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFDFC);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RR const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0x78:expr_value==2?0x79:expr_value==4?0x7B:0x7F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RR const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x78:expr_value==2?0x79:expr_value==4?0x7B:0x7F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RR const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0x78:expr_value==2?0x79:expr_value==4?0x7B:0x7F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RR const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x78:expr_value==2?0x79:expr_value==4?0x7B:0x7F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RRA _TK_NEWLINE @{
DO_stmt(0x1F);
}

| label? _TK_RRA1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x1F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRB _TK_A _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRB _TK_A _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD7F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x61);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_BC1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x61);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x51);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x51);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0008);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0009);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB000D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0008);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0009);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB000D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB000E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB08);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB09);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0A);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0B);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB0E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB0D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC _TK_NEWLINE @{
DO_stmt(0x0F);
}

| label? _TK_RRC const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0x58:expr_value==2?0x59:expr_value==4?0x5B:0x5F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x58:expr_value==2?0x59:expr_value==4?0x5B:0x5F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: case 8: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0x58:expr_value==2?0x59:expr_value==4?0x5B:0x5F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RRC const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x58:expr_value==2?0x59:expr_value==4?0x5B:0x5F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RRCA _TK_NEWLINE @{
DO_stmt(0x0F);
}

| label? _TK_RRCA1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x0F);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRD _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__rrd");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED67);
break;
default: error_illegal_ident(); }
}

| label? _TK_RRHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sra_hl");
break;
case CPU_8085: 
DO_stmt(0x10);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2C);
DO_stmt(0xCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_RSMIX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED7E);
break;
default: error_illegal_ident(); }
}

| label? _TK_RST _TK_DOT _TK_L const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_STMT_LABEL();
if (expr_error) { error_expected_const_expr(); }else { add_rst_opcode(expr_value); }
break;
default: error_illegal_ident(); }
}

| label? _TK_RST _TK_DOT _TK_LIS const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
DO_STMT_LABEL();
if (expr_error) { error_expected_const_expr(); }else { add_rst_opcode(expr_value); }
break;
default: error_illegal_ident(); }
}

| label? _TK_RST _TK_DOT _TK_S const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_STMT_LABEL();
if (expr_error) { error_expected_const_expr(); }else { add_rst_opcode(expr_value); }
break;
default: error_illegal_ident(); }
}

| label? _TK_RST _TK_DOT _TK_SIL const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
DO_STMT_LABEL();
if (expr_error) { error_expected_const_expr(); }else { add_rst_opcode(expr_value); }
break;
default: error_illegal_ident(); }
}

| label? _TK_RST const_expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_STMT_LABEL();
if (expr_error) { error_expected_const_expr(); }else { add_rst_opcode(expr_value); }
}

| label? _TK_RSTV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xCB);
break;
default: error_illegal_ident(); }
}

| label? _TK_RST_V _TK_COMMA const_expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 64: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x8B+((expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_RV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_RZ _TK_NEWLINE @{
DO_stmt(0xC8);
}

| label? _TK_R_C _TK_NEWLINE @{
DO_stmt(0xD8);
}

| label? _TK_R_EQ _TK_NEWLINE @{
DO_stmt(0xC8);
}

| label? _TK_R_GEU _TK_NEWLINE @{
DO_stmt(0xD0);
}

| label? _TK_R_GTU _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_jr_end(0x28, end_label, 0);
add_opcode_jr_end(0x38, end_label, 0);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
case CPU_8080: case CPU_8085: 
{
DO_STMT_LABEL();
const char *end_label = autolabel();
add_opcode_nn_end(0xCA, end_label, 0);
add_opcode_nn_end(0xDA, end_label, 0);
DO_stmt(0xC9);
asm_LABEL_offset(end_label, get_cur_opcode_size());
}
break;
default: error_illegal_ident(); }
}

| label? _TK_R_LEU _TK_NEWLINE @{
DO_stmt(0xC8);
DO_stmt(0xD8);
}

| label? _TK_R_LO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_LTU _TK_NEWLINE @{
DO_stmt(0xD8);
}

| label? _TK_R_LZ _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF8);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_NC _TK_NEWLINE @{
DO_stmt(0xD0);
}

| label? _TK_R_NE _TK_NEWLINE @{
DO_stmt(0xC0);
}

| label? _TK_R_NV _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_NZ _TK_NEWLINE @{
DO_stmt(0xC0);
}

| label? _TK_R_P _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF0);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_PE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_PO _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE0);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_V _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE8);
break;
default: error_illegal_ident(); }
}

| label? _TK_R_Z _TK_NEWLINE @{
DO_stmt(0xC8);
}

| label? _TK_SBB _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9F);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F98);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F99);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x99);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9C);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9D);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBB _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9F);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F98);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F99);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x99);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9C);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9D);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDE);
}

| label? _TK_SBC _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9F);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9F);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F98);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F99);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x99);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9A);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9C);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9E);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F9D);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xDE);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F98);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x98);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F99);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x99);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9A);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9C);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sbc_hl_bc");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sbc_hl_de");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sbc_hl_hl");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sbc_hl_sp");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL1 _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED42);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED52);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL1 _TK_COMMA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED62);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_HL1 _TK_COMMA _TK_SP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xED72);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9E);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD9E00);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD9E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD9C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F9D);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x9D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBC expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDE);
}

| label? _TK_SBI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xDE);
}

| label? _TK_SBOX _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_SBOX _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76ED02);
break;
default: error_illegal_ident(); }
}

| label? _TK_SCF _TK_NEWLINE @{
DO_stmt(0x37);
}

| label? _TK_SCF1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_L const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_LIS const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x49);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_S const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET _TK_DOT _TK_SIL const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x52);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xDDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFDCB00C6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC7+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC0+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC1+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC2+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC3+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC4+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt_idx(0xFDCBC6+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SET const_expr _TK_COMMA _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xCBC5+((8*expr_value)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SETAE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SETSYSP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEDB1, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_SETUSR _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xED6F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SETUSRP expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEDB5, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_SHLD expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
DO_stmt(0xD5);
DO_stmt(0xE5);
DO_stmt(0x54);
DO_stmt(0x5D);
add_opcode_nn(0x21, Expr1_clone(expr), 0);
DO_stmt(0x73);
DO_stmt(0x23);
DO_stmt(0x72);
DO_stmt(0xE1);
DO_stmt(0xD1);
OBJ_DELETE(expr);
}
break;
case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x22, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_SHLDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_SHLX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0xD9);
break;
default: error_illegal_ident(); }
}

| label? _TK_SIM _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8085: 
DO_stmt(0x30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0027);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0020);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0021);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0022);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0023);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0024);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0025);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0027);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0020);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0021);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0022);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0023);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0024);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0025);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB0026);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB27);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB20);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB21);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB22);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB24);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB26);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB25);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0x88:expr_value==2?0x89:expr_value==4?0x8B:0x8F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x88:expr_value==2?0x89:expr_value==4?0x8B:0x8F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0x88:expr_value==2?0x89:expr_value==4?0x8B:0x8F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLA const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x88:expr_value==2?0x89:expr_value==4?0x8B:0x8F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0036);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0036);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLI _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0036);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0036);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0xA8:expr_value==2?0xA9:expr_value==4?0xAB:0xAF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0xA8:expr_value==2?0xA9:expr_value==4?0xAB:0xAF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0xA8:expr_value==2?0xA9:expr_value==4?0xAB:0xAF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLL const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0xA8:expr_value==2?0xA9:expr_value==4?0xAB:0xAF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SLP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED76);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0036);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0037);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0030);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0031);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0032);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0033);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0034);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0035);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0036);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB37);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SLS _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SPHL _TK_NEWLINE @{
DO_stmt(0xF9);
}

| label? _TK_SRA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sra_bc");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB28);
DO_stmt(0xCB19);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sra_de");
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2A);
DO_stmt(0xCB1B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sra_hl");
break;
case CPU_8085: 
DO_stmt(0x10);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2C);
DO_stmt(0xCB1D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0028);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0029);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB002D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0028);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0029);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB002D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB002E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB28);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB29);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB2E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB2D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0x98:expr_value==2?0x99:expr_value==4?0x9B:0x9F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0x98:expr_value==2?0x99:expr_value==4?0x9B:0x9F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0x98:expr_value==2?0x99:expr_value==4?0x9B:0x9F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRA const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0x98:expr_value==2?0x99:expr_value==4?0x9B:0x9F)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRET _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_A1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_B1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_C1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_D1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_E1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_H1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0038);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB0039);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDCB003D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0038);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB0039);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDCB003D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDCB003E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3F);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB38);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB39);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3A);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDCB3E);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL _TK_L1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xCB3D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL const_expr _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xDD00+((expr_value==1?0xB8:expr_value==2?0xB9:expr_value==4?0xBB:0xBF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL const_expr _TK_COMMA _TK_BCDE1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76DD00+((expr_value==1?0xB8:expr_value==2?0xB9:expr_value==4?0xBB:0xBF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL const_expr _TK_COMMA _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0xFD00+((expr_value==1?0xB8:expr_value==2?0xB9:expr_value==4?0xBB:0xBF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_SRL const_expr _TK_COMMA _TK_JKHL1 _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
if (expr_error) { error_expected_const_expr(); } else {
switch (expr_value) {
case 1: case 2: case 4: break;
default: error_int_range(expr_value);
}}
DO_stmt(0x76FD00+((expr_value==1?0xB8:expr_value==2?0xB9:expr_value==4?0xBB:0xBF)));
break;
default: error_illegal_ident(); }
}

| label? _TK_STA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0x32, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
case CPU_GBZ80: 
if (expr_in_parens) warn_expr_in_parens();
{
DO_STMT_LABEL();
Expr1 *expr = pop_expr(ctx);
add_opcode_nn(0xEA, Expr1_clone(expr), 0);
OBJ_DELETE(expr);
}
break;
default: error_illegal_ident(); }
}

| label? _TK_STAE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED95);
break;
default: error_illegal_ident(); }
}

| label? _TK_STAX _TK_B _TK_NEWLINE @{
DO_stmt(0x02);
}

| label? _TK_STAX _TK_BC _TK_NEWLINE @{
DO_stmt(0x02);
}

| label? _TK_STAX _TK_D _TK_NEWLINE @{
DO_stmt(0x12);
}

| label? _TK_STAX _TK_DE _TK_NEWLINE @{
DO_stmt(0x12);
}

| label? _TK_STC _TK_NEWLINE @{
DO_stmt(0x37);
}

| label? _TK_STMIX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: 
DO_stmt(0xED7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_STOP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0x1000);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F97);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x97);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F90);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x90);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F91);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x91);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F92);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x92);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F93);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x93);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F94);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F95);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xD6);
}

| label? _TK_SUB _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F97);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x97);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F97);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x97);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F90);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x90);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F91);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x91);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F92);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x92);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F93);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x93);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F94);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F96);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7F95);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F90);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x90);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F91);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x91);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F92);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x92);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F93);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x93);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F94);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sub_hl_bc");
break;
case CPU_8085: 
DO_stmt(0x08);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sub_hl_de");
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x55);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_HL _TK_COMMA _TK_HL _TK_NEWLINE @{
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sub_hl_hl");
}

| label? _TK_SUB _TK_HL _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x45);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_HL _TK_COMMA _TK_SP _TK_NEWLINE @{
DO_STMT_LABEL();
add_call_emul_func("__z80asm__sub_hl_sp");
}

| label? _TK_SUB _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x55);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_HL1 _TK_COMMA _TK_JK _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x45);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFD9600);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFD96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDD95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD94);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFD95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_JKHL1 _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDD6);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F95);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x95);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7F96);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0x96);
break;
default: error_illegal_ident(); }
}

| label? _TK_SUB expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xD6);
}

| label? _TK_SUI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xD6);
}

| label? _TK_SURES _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xED7D);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB37);
break;
case CPU_Z80N: 
DO_stmt(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB30);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB31);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB32);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB33);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB34);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB36);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xCB35);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAP _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SWAPNIB _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
DO_stmt(0xED23);
break;
default: error_illegal_ident(); }
}

| label? _TK_SYSCALL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xED75);
break;
default: error_illegal_ident(); }
}

| label? _TK_SYSRET _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED83);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED04);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED14);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED27);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED64);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED04);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED14);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_HL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_IX _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xDD4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_IY _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD4C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_JKHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xFD5C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TEST expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED27);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED64);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED04);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED14);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED27);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED64);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED3C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED04);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED0C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED14);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED1C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED24);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED34);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
DO_stmt(0xED2C);
break;
default: error_illegal_ident(); }
}

| label? _TK_TST expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_Z80N: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED27);
break;
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED64);
break;
default: error_illegal_ident(); }
}

| label? _TK_TSTIO expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xED74);
break;
default: error_illegal_ident(); }
}

| label? _TK_UMA _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xEDC0);
break;
default: error_illegal_ident(); }
}

| label? _TK_UMS _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R3K: 
DO_stmt(0xEDC8);
break;
default: error_illegal_ident(); }
}

| label? _TK_XCHG _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_stmt(0xE5);
DO_stmt(0xD5);
DO_stmt(0xE1);
DO_stmt(0xD1);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xEB);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A _TK_COMMA expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xEE);
}

| label? _TK_XOR _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAF);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA8);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FA9);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAA);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAB);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAC);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAE);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x7FAD);
break;
case CPU_R2KA: case CPU_R3K: 
DO_stmt(0x76);
DO_stmt(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_A1 _TK_COMMA expr _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
if (expr_in_parens) warn_expr_in_parens();
DO_stmt(0x76);
DO_stmt_n(0xEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_L _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_LIS _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80_Z80: 
DO_stmt(0x49);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_S _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_A _TK_COMMA _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_DOT _TK_SIL _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: 
DO_stmt(0x52);
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_HL _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xA8);
DO_stmt(0x67);
DO_stmt(0x7D);
DO_stmt(0xA9);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xF5);
DO_stmt(0x7F7C);
DO_stmt(0x7FA8);
DO_stmt(0x7F67);
DO_stmt(0x7F7D);
DO_stmt(0x7FA9);
DO_stmt(0x7F6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_HL _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x54);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0x7C);
DO_stmt(0xAA);
DO_stmt(0x67);
DO_stmt(0x7D);
DO_stmt(0xAB);
DO_stmt(0x6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_HL1 _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0x54);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_HL _TK_MINUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
DO_stmt(0x2B);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
DO_stmt(0x2B);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_HL _TK_PLUS _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
DO_stmt(0x23);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
DO_stmt(0x23);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_HL _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_IX _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xDDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_IX expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xDDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_IY _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xFDAE00);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IND_IY expr _TK_RPAREN _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt_idx(0xFDAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IX _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xA8);
DO_stmt(0xDD67);
DO_stmt(0xDD7D);
DO_stmt(0xA9);
DO_stmt(0xDD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IX _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xDD7C);
DO_stmt(0xAA);
DO_stmt(0xDD67);
DO_stmt(0xDD7D);
DO_stmt(0xAB);
DO_stmt(0xDD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IXH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IXL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xDDAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IY _TK_COMMA _TK_BC _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xA8);
DO_stmt(0xFD67);
DO_stmt(0xFD7D);
DO_stmt(0xA9);
DO_stmt(0xFD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IY _TK_COMMA _TK_DE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xF5);
DO_stmt(0xFD7C);
DO_stmt(0xAA);
DO_stmt(0xFD67);
DO_stmt(0xFD7D);
DO_stmt(0xAB);
DO_stmt(0xFD6F);
DO_stmt(0xF1);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IYH _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_IYL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
DO_stmt(0xFDAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_JKHL _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0xEDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_JKHL1 _TK_COMMA _TK_BCDE _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x76);
DO_stmt(0xEDEE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XOR expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xEE);
}

| label? _TK_XRA _TK_A _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAF);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAF);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_B _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA8);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA8);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_C _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FA9);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xA9);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_D _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAA);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAA);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_E _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAB);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAB);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_H _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAC);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAC);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_L _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAD);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAD);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRA _TK_M _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_R4K: case CPU_R5K: 
DO_stmt(0x7FAE);
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xAE);
break;
default: error_illegal_ident(); }
}

| label? _TK_XRI expr _TK_NEWLINE @{
if (expr_in_parens) warn_expr_in_parens();
DO_stmt_n(0xEE);
}

| label? _TK_XTHL _TK_NEWLINE @{
switch (option_cpu()) {
case CPU_GBZ80: 
DO_STMT_LABEL();
add_call_emul_func("__z80asm__ex_sp_hl");
break;
case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
DO_stmt(0xE3);
break;
case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
DO_stmt(0xED54);
break;
default: error_illegal_ident(); }
}

